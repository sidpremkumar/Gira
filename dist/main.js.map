{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNA;AAEA;AACA,MAAMA,QAAQ,GAAGC,mBAAO,CAAC,0BAAD,CAAxB;;CAGA;AACA;;AACA,IAAIG,UAAJ;AAEA;AACA;AACA;;AACA,SAASC,YAAT,GAAwB;AACpB,QAAM,CAAEC,KAAF,EAASC,MAAT,IAAoBC,aAAa,EAAvC,CADoB,CAGpB;;AACAJ,EAAAA,UAAU,GAAG,IAAID,mDAAJ,CAAkB;AAC3BG,IAAAA,KAAK,EAAEA,KADoB;AAE3BC,IAAAA,MAAM,EAAEA,MAFmB;AAG3BE,IAAAA,cAAc,EAAE,IAHW;AAI3BC,IAAAA,cAAc,EAAE;AACZC,MAAAA,eAAe,EAAE,IADL;AAEZC,MAAAA,gBAAgB,EAAE,KAFN;AAGZC,MAAAA,UAAU,EAAE,IAHA;AAIZC,MAAAA,UAAU,EAAE,IAJA;AAKZC,MAAAA,YAAY,EAAE;AALF,KAJW,CAW3B;;AAX2B,GAAlB,CAAb,CAJoB,CAkBpB;;AACAX,EAAAA,UAAU,CAACY,OAAX,CAAmB,uBAAnB,EAnBoB,CAqBpB;;AACAZ,EAAAA,UAAU,CAACa,WAAX,CAAuBC,YAAvB,GAtBoB,CAwBpB;;AACAd,EAAAA,UAAU,CAACe,EAAX,CAAc,QAAd,EAAwB,YAAY;AAChC;AACA;AACA;AACAf,IAAAA,UAAU,GAAG,IAAb;AACH,GALD;AAMH;AAED;AACA;AACA;AACA;AACA;;;AACAF,4CAAA,CAAO,OAAP,EAAgBG,YAAhB;AAEA;AACA;AACA;;AACAH,4CAAA,CAAO,mBAAP,EAA4B,YAAY;AACpC;AACA;AACA,MAAIkB,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AAC/BnB,IAAAA,8CAAA;AACH;AACJ,CAND;AAQAA,4CAAA,CAAO,UAAP,EAAmB,YAAY;AAC3B;AACA;AACA,MAAIE,UAAU,KAAK,IAAnB,EAAyB;AACrBC,IAAAA,YAAY;AACf;AACJ,CAND;AAQA;AACA;AACA;AACA;AACA;;AACA,SAASG,aAAT,GAA2C;AACvC;AACA,MAAIJ,UAAU,IAAImB,SAAlB,EAA6B;AACzB;AACA,UAAMC,cAAc,GAAGxB,QAAQ,CAACyB,MAAhC;AACA,UAAMC,cAAc,GAAGF,cAAc,CAACG,iBAAf,EAAvB;AACA,UAAM;AAAErB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoBmB,cAAc,CAACE,YAAzC,CAJyB,CAMzB;;AACA,WAAO,CAACtB,KAAK,GAAG,GAAT,EAAeC,MAAM,GAAG,GAAxB,CAAP;AACH,GARD,MAQO;AACH;AACA,WAAOH,UAAU,CAACyB,OAAX,EAAP;AACH;AAEJ,C","sources":["webpack://my-app/external node-commonjs \"electron\"","webpack://my-app/webpack/bootstrap","webpack://my-app/webpack/runtime/compat get default export","webpack://my-app/webpack/runtime/define property getters","webpack://my-app/webpack/runtime/hasOwnProperty shorthand","webpack://my-app/webpack/runtime/make namespace object","webpack://my-app/./electron/main.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Ref: https://tombuyse.blog/blog/using-electron-with-react-and-node\n\n// 3rd Party\nconst electron = require('electron');\nimport { app, BrowserWindow } from 'electron'\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow: any;\n\n/**\n * Our main createWindow function to populate our main window\n */\nfunction createWindow() {\n    const [ width, height ] = getRealScreen()\n\n    // Create the browser window.\n    mainWindow = new BrowserWindow({\n        width: width, \n        height: height,\n        useContentSize: true,\n        webPreferences: {\n            nodeIntegration: true,\n            contextIsolation: false,\n            spellcheck: true,\n            webviewTag: true,\n            scrollBounce: true\n        },\n        // titleBarStyle : 'hidden'\n    });\n\n    // and load the index.html of the app.\n    mainWindow.loadURL('http://localhost:3000');\n\n    // Open the DevTools.\n    mainWindow.webContents.openDevTools();\n\n    // Emitted when the window is closed.\n    mainWindow.on('closed', function () {\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow = null\n    })\n}\n\n/**\n * This method will be called when Electron has finished\n * initialization and is ready to create browser windows.\n * Some APIs can only be used after this event occurs.\n */\napp.on('ready', createWindow);\n\n/**\n * Quit when all windows are closed.\n*/ \napp.on('window-all-closed', function () {\n    // On OS X it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if (process.platform !== 'darwin') {\n        app.quit()\n    }\n});\n\napp.on('activate', function () {\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) {\n        createWindow()\n    }\n});\n\n/**\n * Helper function to get the real screen size \n * This function will automatically detect if the main window has not yet to be defined\n * @returns {Array} List of numbers that correspond to width,height respectively\n */\nfunction getRealScreen(): [number, number] {\n    // If the main window hasn't been created, determine based on the screen size\n    if (mainWindow == undefined) {\n        // Set the height weight the monitor dimensions\n        const screenElectron = electron.screen;\n        const primaryDisplay = screenElectron.getPrimaryDisplay()\n        const { width, height } = primaryDisplay.workAreaSize\n\n        // Don't return full w/h since it causes some resizing issues\n        return [width - 250 , height - 250]\n    } else {\n        // Else just return the mainwindows size\n        return mainWindow.getSize()\n    }\n   \n}"],"names":["electron","require","app","BrowserWindow","mainWindow","createWindow","width","height","getRealScreen","useContentSize","webPreferences","nodeIntegration","contextIsolation","spellcheck","webviewTag","scrollBounce","loadURL","webContents","openDevTools","on","process","platform","quit","undefined","screenElectron","screen","primaryDisplay","getPrimaryDisplay","workAreaSize","getSize"],"sourceRoot":""}